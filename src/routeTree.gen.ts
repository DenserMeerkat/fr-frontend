/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as R404RouteImport } from './routes/404'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TestIndexRouteImport } from './routes/test/index'
import { Route as TechIndexRouteImport } from './routes/tech/index'
import { Route as TeamIndexRouteImport } from './routes/team/index'
import { Route as SystemIndexRouteImport } from './routes/system/index'
import { Route as IntroIndexRouteImport } from './routes/intro/index'
import { Route as FutureIndexRouteImport } from './routes/future/index'
import { Route as DemoIndexRouteImport } from './routes/demo/index'
import { Route as ConclusionIndexRouteImport } from './routes/conclusion/index'
import { Route as ChallengesIndexRouteImport } from './routes/challenges/index'

const R404Route = R404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestIndexRoute = TestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRouteImport,
} as any)
const TechIndexRoute = TechIndexRouteImport.update({
  id: '/tech/',
  path: '/tech/',
  getParentRoute: () => rootRouteImport,
} as any)
const TeamIndexRoute = TeamIndexRouteImport.update({
  id: '/team/',
  path: '/team/',
  getParentRoute: () => rootRouteImport,
} as any)
const SystemIndexRoute = SystemIndexRouteImport.update({
  id: '/system/',
  path: '/system/',
  getParentRoute: () => rootRouteImport,
} as any)
const IntroIndexRoute = IntroIndexRouteImport.update({
  id: '/intro/',
  path: '/intro/',
  getParentRoute: () => rootRouteImport,
} as any)
const FutureIndexRoute = FutureIndexRouteImport.update({
  id: '/future/',
  path: '/future/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoIndexRoute = DemoIndexRouteImport.update({
  id: '/demo/',
  path: '/demo/',
  getParentRoute: () => rootRouteImport,
} as any)
const ConclusionIndexRoute = ConclusionIndexRouteImport.update({
  id: '/conclusion/',
  path: '/conclusion/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChallengesIndexRoute = ChallengesIndexRouteImport.update({
  id: '/challenges/',
  path: '/challenges/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/challenges': typeof ChallengesIndexRoute
  '/conclusion': typeof ConclusionIndexRoute
  '/demo': typeof DemoIndexRoute
  '/future': typeof FutureIndexRoute
  '/intro': typeof IntroIndexRoute
  '/system': typeof SystemIndexRoute
  '/team': typeof TeamIndexRoute
  '/tech': typeof TechIndexRoute
  '/test': typeof TestIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/challenges': typeof ChallengesIndexRoute
  '/conclusion': typeof ConclusionIndexRoute
  '/demo': typeof DemoIndexRoute
  '/future': typeof FutureIndexRoute
  '/intro': typeof IntroIndexRoute
  '/system': typeof SystemIndexRoute
  '/team': typeof TeamIndexRoute
  '/tech': typeof TechIndexRoute
  '/test': typeof TestIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/challenges/': typeof ChallengesIndexRoute
  '/conclusion/': typeof ConclusionIndexRoute
  '/demo/': typeof DemoIndexRoute
  '/future/': typeof FutureIndexRoute
  '/intro/': typeof IntroIndexRoute
  '/system/': typeof SystemIndexRoute
  '/team/': typeof TeamIndexRoute
  '/tech/': typeof TechIndexRoute
  '/test/': typeof TestIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/404'
    | '/challenges'
    | '/conclusion'
    | '/demo'
    | '/future'
    | '/intro'
    | '/system'
    | '/team'
    | '/tech'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/404'
    | '/challenges'
    | '/conclusion'
    | '/demo'
    | '/future'
    | '/intro'
    | '/system'
    | '/team'
    | '/tech'
    | '/test'
  id:
    | '__root__'
    | '/'
    | '/404'
    | '/challenges/'
    | '/conclusion/'
    | '/demo/'
    | '/future/'
    | '/intro/'
    | '/system/'
    | '/team/'
    | '/tech/'
    | '/test/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  R404Route: typeof R404Route
  ChallengesIndexRoute: typeof ChallengesIndexRoute
  ConclusionIndexRoute: typeof ConclusionIndexRoute
  DemoIndexRoute: typeof DemoIndexRoute
  FutureIndexRoute: typeof FutureIndexRoute
  IntroIndexRoute: typeof IntroIndexRoute
  SystemIndexRoute: typeof SystemIndexRoute
  TeamIndexRoute: typeof TeamIndexRoute
  TechIndexRoute: typeof TechIndexRoute
  TestIndexRoute: typeof TestIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tech/': {
      id: '/tech/'
      path: '/tech'
      fullPath: '/tech'
      preLoaderRoute: typeof TechIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/team/': {
      id: '/team/'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof TeamIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/system/': {
      id: '/system/'
      path: '/system'
      fullPath: '/system'
      preLoaderRoute: typeof SystemIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/intro/': {
      id: '/intro/'
      path: '/intro'
      fullPath: '/intro'
      preLoaderRoute: typeof IntroIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/future/': {
      id: '/future/'
      path: '/future'
      fullPath: '/future'
      preLoaderRoute: typeof FutureIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/': {
      id: '/demo/'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/conclusion/': {
      id: '/conclusion/'
      path: '/conclusion'
      fullPath: '/conclusion'
      preLoaderRoute: typeof ConclusionIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/challenges/': {
      id: '/challenges/'
      path: '/challenges'
      fullPath: '/challenges'
      preLoaderRoute: typeof ChallengesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  R404Route: R404Route,
  ChallengesIndexRoute: ChallengesIndexRoute,
  ConclusionIndexRoute: ConclusionIndexRoute,
  DemoIndexRoute: DemoIndexRoute,
  FutureIndexRoute: FutureIndexRoute,
  IntroIndexRoute: IntroIndexRoute,
  SystemIndexRoute: SystemIndexRoute,
  TeamIndexRoute: TeamIndexRoute,
  TechIndexRoute: TechIndexRoute,
  TestIndexRoute: TestIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
